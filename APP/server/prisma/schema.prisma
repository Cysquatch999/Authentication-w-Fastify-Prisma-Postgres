generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  email            String             @unique @db.VarChar(150)
  password         String             @db.VarChar(256)
  creationAt       DateTime           @default(now()) @db.Timestamptz(6)
  isVerified       Boolean            @default(false)
  isAdmin          Boolean            @default(false)
  contact_messages contact_messages[]
  patch_notes      patch_notes[]
  payments         payments[]
  reset_password   reset_password[]
  services         services[]
  verify_account   verify_account[]
}

model reset_password {
  id          Int      @id @default(autoincrement())
  userID      Int
  resetCode   String   @db.VarChar(256)
  isActive    Boolean  @default(true)
  isUsed      Boolean  @default(false)
  expiredTime DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_to_reset_password_userID")

  @@index([userID], map: "fki_userID_to_reset_password")
}

model verify_account {
  id          Int      @id @default(autoincrement())
  userID      Int
  expiredTime DateTime @default(now()) @db.Timestamptz(6)
  isUsed      Boolean  @default(false)
  isActive    Boolean  @default(true)
  verifyCode  String   @db.VarChar(256)
  users       users    @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_to_verify_account_userID")

  @@index([userID], map: "fki_users_id_to_verify_account_userID")
  @@index([userID], map: "fki_b")
}

model contact_messages {
  id       Int     @id @default(autoincrement())
  userID   Int
  location String  @db.VarChar(100)
  message  String  @db.VarChar(3000)
  isRead   Boolean @default(false)
  issue    String  @db.VarChar(100)
  phone    String  @db.VarChar(15)
  users    users   @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_to_contact_messages_userID")

  @@index([userID], map: "fki_users_id_to_contact_messages_userID")
}

model patch_notes {
  id         Int      @id @default(autoincrement())
  userID     Int
  notes      String   @db.VarChar(5000)
  creationAt DateTime @default(now()) @db.Timestamptz(6)
  title      String   @db.VarChar(250)
  users      users    @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_to_patch_notes_userID")

  @@index([userID], map: "fki_users_id_to_patch_notes_userID")
}

model services {
  id            Int     @id @default(autoincrement())
  userID        Int
  isPremium     Boolean @default(false)
  bammaActive   Boolean @default(false)
  awsActive     Boolean @default(false)
  awsPlusActive Boolean @default(false)
  highCap       Boolean @default(false)
  users         users   @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_to_services_userID")

  @@index([userID], map: "fki_users_id_to_services_userID")
}

model payments {
  id             Int      @id @default(autoincrement())
  userID         Int
  isActive       Boolean  @default(true)
  cardNumber     String   @db.VarChar(256)
  cardCVC        String   @db.VarChar(256)
  cardEXMonth    String   @db.VarChar(256)
  creationAt     DateTime @default(now()) @db.Timestamptz(6)
  cardLastDigits Int
  cardEXYear     String   @db.VarChar(256)
  users          users    @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_to_payments_userID")

  @@index([userID], map: "fki_users_id_to_payments_userID")
}
